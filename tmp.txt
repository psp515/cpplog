#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <cstring>
#include <string>

#pragma comment(lib, "ws2_32.lib")

#define PORT 80  // Default HTTP port

int main() {
    WSADATA wsaData;
    SOCKET sock;
    struct sockaddr_in server_addr;
    const char* server_hostname = "localhost";  // Use localhost
    const char* server_ip = "127.0.0.1";       // Localhost IP address
    const char* endpoint = "/logs/single";      // Endpoint we're posting to

    // The JSON data to be sent in the POST body
    const char* json_data = "{\"message\": \"message\"}";

    // Construct the POST request with necessary headers
    std::string request = "POST " + std::string(endpoint) + " HTTP/1.1\r\n"
                          "Host: " + std::string(server_hostname) + "\r\n"
                          "Content-Type: application/json\r\n"
                          "Content-Length: " + std::to_string(strlen(json_data)) + "\r\n"
                          "Connection: close\r\n\r\n"
                          + std::string(json_data);

    // Initialize Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed." << std::endl;
        return 1;
    }

    // Create a socket
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == INVALID_SOCKET) {
        std::cerr << "Socket creation failed." << std::endl;
        WSACleanup();
        return 1;
    }

    // Set up the server address structure for localhost (127.0.0.1)
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);  // Port 80 for HTTP
    server_addr.sin_addr.s_addr = inet_addr(server_ip);  // Localhost IP

    // Connect to the server (localhost)
    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        std::cerr << "Connection to localhost failed." << std::endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    // Send the POST request
    if (send(sock, request.c_str(), request.length(), 0) == SOCKET_ERROR) {
        std::cerr << "Send failed." << std::endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    // Receive the response
    char buffer[4096];
    int bytes_received;
    while ((bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0) {
        buffer[bytes_received] = '\0';  // Null-terminate the response
        std::cout << buffer;  // Output the response
    }

    if (bytes_received == SOCKET_ERROR) {
        std::cerr << "Receive failed." << std::endl;
    }

    // Close the socket
    closesocket(sock);
    WSACleanup();  // Clean up Winsock

    return 0;
}
